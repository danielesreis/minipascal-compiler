package compilador.ast;
public interface Visitor {
    public void visitPrograma(Programa p);
    public void visitComandoAtribuicao(ComandoAtribuicao c);
    public void visitComandoAtribuicaoIndexada(ComandoAtribuicaoIndexada c);
    public void visitComandoChamadaProcedimento(ComandoChamadaProcedimento c);
    public void visitComandoChamadaProcedimentoSemArgs(ComandoChamadaProcedimentoSemArgs c);
    public void visitComandoComposto(ComandoComposto c);
    public void visitComandoIf(ComandoIf c);
    public void visitComandoIfElse(ComandoIfElse c);
    public void visitComandoSequencial(ComandoSequencial c);
    public void visitComandoWhile(ComandoWhile c);
    public void visitCorpoComDeclaracaoComando(CorpoComDeclaracaoComando c);
    public void visitCorpoSemComando(CorpoSemComando c);
    public void visitCorpoSemDeclaracao(CorpoSemDeclaracao c);
    public void visitDeclaracaoFuncao(DeclaracaoFuncao d);
    public void visitDeclaracaoFuncaoSemArgs(DeclaracaoFuncaoSemArgs d);
    public void visitDeclaracaoProcedure(DeclaracaoProcedure d);
    public void visitDeclaracaoProcedureSemArgs(DeclaracaoProcedureSemArgs d);
    public void visitDeclaracaoSequencial(DeclaracaoSequencial d);
    public void visitDeclaracaoVariavel(DeclaracaoVariavel d);
    public void visitExpressaoBinaria(ExpressaoBinaria e);
    public void visitExpressaoSequencial(ExpressaoSequencial e);
    public void visitExpressaoSimples(ExpressaoSimples e);
    public void visitFatorAdSequencial(FatorAdSequencial f);
    public void visitFatorChamadaFuncao(FatorChamadaFuncao f);
    public void visitFatorChamadaFuncaoSemArgs(FatorChamadaFuncaoSemArgs f);
    public void visitFatorId(FatorId f);
    public void visitFatorMulSequencial(FatorMulSequencial f);
    public void visitIdentifier(Identifier i);
    public void visitIdentifierSequencial(IdentifierSequencial i);
    public void visitLiteral(Literal l);
    public void visitOpAd(OpAd o);
    public void visitOpMul(OpMul o);
    public void visitOpRel(OpRel o);
    public void visitParametroSequencial(ParametroSequencial p);
    public void visitParametroSimples(ParametroSimples p);
    public void visitTipoAgregado(TipoAgregado t);
    public void visitTipoSimples(TipoSimples t);
    public void visitVariavelId(VariavelId v);
    public void visitVariavelIndexada(VariavelIndexada v);
}
